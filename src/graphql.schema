
/*
 * -------------------------------------------------------
 * THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
 * -------------------------------------------------------
 */

/* tslint:disable */
/* eslint-disable */

export enum AttendeeType {
    MEMBER = "MEMBER",
    NON_MEMBER = "NON_MEMBER"
}

export enum EventType {
    ONE_TO_ONE = "ONE_TO_ONE",
    ONE_TO_MANY = "ONE_TO_MANY"
}

export enum SponsorshipTier {
    BRONZE = "BRONZE",
    SILVER = "SILVER",
    GOLD = "GOLD",
    PLATINUM = "PLATINUM"
}

export enum Status {
    DRAFT = "DRAFT",
    LIVE = "LIVE",
    INACTIVE = "INACTIVE"
}

export enum TicketStatus {
    Open = "Open",
    Closed = "Closed",
    Mark_As_Sold_Out = "Mark_As_Sold_Out"
}

export enum TicketType {
    Free = "Free",
    Paid = "Paid"
}

export enum TicketConsumptionType {
    Loyalty_Points_Only = "Loyalty_Points_Only",
    No_Loyalty_Points = "No_Loyalty_Points",
    Cash_Loyalty_Points = "Cash_Loyalty_Points"
}

export enum TicketDiscountType {
    Percentage = "Percentage",
    Flat_Points = "Flat_Points"
}

export enum TicketSlots {
    Duration = "Duration",
    Count = "Count"
}

export enum TicketVisibilityInApp {
    Always_Available = "Always_Available",
    Always_Hidden = "Always_Hidden",
    Hidden_When = "Hidden_When"
}

export enum HiddenWhen {
    Sold_Out = "Sold_Out",
    Status_Closed = "Status_Closed",
    Sales_Not_Started = "Sales_Not_Started",
    Sales_Ended = "Sales_Ended"
}

export interface AddEventInput {
    eventName: string;
    attendeeType: AttendeeType;
    eventType: EventType;
    storeName: string;
    eventLocation: string;
    sponsorshipTier: SponsorshipTier;
    eventDescription: string;
    eventStartDate: string;
    eventStartTime: string;
    eventEndDate: string;
    eventEndTime: string;
    eventCategory: string;
    eventSampling: boolean;
    eventSamplingProduct: string;
    eventHeroImage: string;
    eventImageCarousal: string;
    eventTnC: string;
    publishToBrands: boolean;
    publishToCustomers: boolean;
    status: Status;
    isDeleted: boolean;
}

export interface UpdateEventInput {
    eventName: string;
    attendeeType: AttendeeType;
    eventType: EventType;
    storeName: string;
    eventLocation: string;
    sponsorshipTier: SponsorshipTier;
    eventDescription: string;
    eventStartDate: string;
    eventStartTime: string;
    eventEndDate: string;
    eventEndTime: string;
    eventCategory: string;
    eventSampling: boolean;
    eventSamplingProduct: string;
    eventHeroImage: string;
    eventImageCarousal: string;
    eventTnC: string;
    publishToBrands: boolean;
    publishToCustomers: boolean;
    status: Status;
    isDeleted: boolean;
}

export interface AddTicketInput {
    eventId: string;
    ticketName: string;
    ticketColor: string;
    ticketStatus: TicketStatus;
    ticketQuantity: number;
    ticketType: TicketType;
    ticketValue: number;
    ticketConsumptionType: TicketConsumptionType;
    ticketDiscountType: TicketDiscountType;
    ticketDiscountValue: number;
    minimumBuyingLimit: number;
    maximumBuyingLimit: number;
    salesStartDate: string;
    salesStartTime: string;
    salesEndDate: string;
    salesEndTime: string;
    ticketSlotType: TicketSlots;
    ticketSlotValue: number;
    ticketSampleProduct: string;
    ticketDescription: string;
    ticketVisibilityInApp: TicketVisibilityInApp;
    ticketHiddenWhen: HiddenWhen;
    isDeleted: boolean;
}

export interface Ticket {
    eventId?: Nullable<Event>;
    id: string;
    ticketName: string;
    ticketColor: string;
    ticketQuantity: number;
    ticketValue: number;
    ticketDiscountValue: number;
    minimumBuyingLimit: number;
    maximumBuyingLimit: number;
    saleStartDate: string;
    saleStartTime: string;
    saleEndDate: string;
    saleEndTime: string;
    ticketSlotValue: number;
    ticketSampleProduct: string;
    ticketDescription: string;
    isDeleted: boolean;
}

export interface Event {
    id: string;
    eventName: string;
    attendeeType: string;
    eventType: string;
    storeName: string;
    eventLocation: string;
    sponsorshipTier: string;
    eventDescription: string;
    eventStartDate: string;
    eventStartTime: string;
    eventEndDate: string;
    eventEndTime: string;
    eventCategory: string;
    eventSampling: boolean;
    eventSamplingProduct: string;
    eventHeroImage: string;
    eventImageCarousal: string;
    eventTnC: string;
    publishToBrands: boolean;
    publishToCustomers: boolean;
    status: string;
    isDeleted: boolean;
    createdAt: DateTime;
    updatedAt: DateTime;
    tickets?: Nullable<Ticket[]>;
}

export interface IQuery {
    getAllEvents(): Event[] | Promise<Event[]>;
    getEventById(eventId: string): Nullable<Event> | Promise<Nullable<Event>>;
    getAllTickets(): Ticket[] | Promise<Ticket[]>;
    getTicketByEventId(eventId: string): Nullable<Ticket[]> | Promise<Nullable<Ticket[]>>;
}

export interface IMutation {
    createEvent(addEventInput: AddEventInput): Event | Promise<Event>;
    deleteEventById(eventId: string): string | Promise<string>;
    updateEventById(id: string, updateEventInput: UpdateEventInput): Event | Promise<Event>;
    createTicket(addTicketInput: AddTicketInput): Ticket | Promise<Ticket>;
}

export type DateTime = any;
type Nullable<T> = T | null;
